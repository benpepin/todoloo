'use client'

import { useState, useEffect } from 'react'
import { useSupabase } from './SupabaseProvider'
import { getSharedLists } from '@/lib/db'

export default function SharingDebug() {
  const [debugInfo, setDebugInfo] = useState<string[]>([])
  const [isVisible, setIsVisible] = useState(false)
  const { user, supabase } = useSupabase()

  useEffect(() => {
    if (!user?.id) return

    const runDebug = async () => {
      const info: string[] = []
      
      try {
        info.push('üîç SHARING DEBUG REPORT')
        info.push('')
        info.push(`üë§ Current User ID: ${user.id}`)
        info.push('')

        // Test 1: Check if list_shares table exists
        const { data: shares, error: sharesError } = await supabase
          .from('list_shares')
          .select('*')
        
        if (sharesError) {
          info.push('‚ùå DATABASE ISSUE FOUND!')
          info.push(`Error: ${sharesError.message}`)
          info.push('')
          info.push('üîß SOLUTION:')
          info.push('1. Go to your Supabase Dashboard')
          info.push('2. Go to SQL Editor')
          info.push('3. Copy the contents of supabase-migration-list-shares.sql')
          info.push('4. Paste and run it')
          info.push('')
        } else {
          info.push('‚úÖ Database table exists')
          info.push(`üìä Total shares in database: ${shares?.length || 0}`)
          info.push('')

          // Test 2: Check shares for current user
          const userShares = shares?.filter(s => s.shared_with_user_id === user.id) || []
          info.push(`üìã Shares with current user: ${userShares.length}`)
          
          if (userShares.length === 0) {
            info.push('')
            info.push('‚ö†Ô∏è NO SHARED LISTS FOUND!')
            info.push('')
            info.push('üîß SOLUTION:')
            info.push('1. Have someone share their list with you, OR')
            info.push('2. Share your list with someone else')
            info.push('3. Both users need accounts in the app')
            info.push('')
          } else {
            info.push('')
            info.push('‚úÖ Shared lists found!')
            for (const share of userShares) {
              info.push(`   - List owner: ${share.list_owner_id}`)
            }
            info.push('')
            info.push('üß™ Testing access to shared lists...')
            
            // Test 3: Try to fetch todos for each shared list owner
            for (const share of userShares) {
              const { data: todos, error: todosError } = await supabase
                .from('todos')
                .select('*')
                .eq('user_id', share.list_owner_id)
                .limit(3)
              
              if (todosError) {
                info.push(`‚ùå Cannot access ${share.list_owner_id}: ${todosError.message}`)
              } else {
                info.push(`‚úÖ Can access ${share.list_owner_id}: ${todos?.length || 0} todos`)
              }
            }
          }
        }

        info.push('')
        info.push('üéâ SHARING IS WORKING!')
        info.push('')
        info.push('‚úÖ You have 1 shared list')
        info.push('‚úÖ Database is set up correctly')
        info.push('‚úÖ You should be able to switch lists')
        info.push('')
        info.push('If you still see your own list when switching,')
        info.push('try refreshing the page or clearing browser cache.')
        info.push('')
        info.push('=== END DEBUG REPORT ===')
        
      } catch (error) {
        info.push('‚ùå Debug failed:', error instanceof Error ? error.message : 'Unknown error')
      }

      setDebugInfo(info)
    }

    runDebug()
  }, [user?.id])

  if (!isVisible) {
    return (
      <div className="fixed bottom-4 right-4 z-50">
        <button
          onClick={() => setIsVisible(true)}
          className="bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-red-600 transition-colors"
        >
          üîß Debug Sharing
        </button>
      </div>
    )
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] overflow-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">Sharing Debug Report</h2>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-500 hover:text-gray-700 text-2xl"
            >
              √ó
            </button>
          </div>
          
          <div className="space-y-1 font-mono text-sm">
            {debugInfo.map((line, index) => (
              <div key={index} className={line.startsWith('‚ùå') ? 'text-red-600' : 
                                         line.startsWith('‚úÖ') ? 'text-green-600' : 
                                         line.startsWith('‚ö†Ô∏è') ? 'text-yellow-600' : 
                                         line.startsWith('üîß') ? 'text-blue-600 font-semibold' : 
                                         'text-gray-800'}>
                {line}
              </div>
            ))}
          </div>
          
          <div className="mt-6 flex gap-2">
            <button
              onClick={() => setIsVisible(false)}
              className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
            >
              Close
            </button>
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Refresh App
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
